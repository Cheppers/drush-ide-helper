<?xml version="1.0"?>
<ruleset
    name="custom"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>Custom rule set for drupal/ide_helper package.</description>

    <rule ref="rulesets/cleancode.xml">
        <exclude name="StaticAccess"/>
    </rule>
    <rule name="CleanCode.StaticAccess"
        since="1.4.0"
        message="Avoid using static access to class '{0}' in method '{1}'."
        class="PHPMD\Rule\CleanCode\StaticAccess"
        externalInfoUrl="http://phpmd.org/rules/cleancode.html#staticaccess">
        <description>
            Static access causes unexchangeable dependencies to other classes and leads to hard to test code.
            Avoid using static access at all costs and instead inject dependencies through the constructor.
            The only case when static access is acceptable is when used for factory methods.
        </description>
        <priority>1</priority>
        <properties>
            <property name="exceptions"
              value="
              \Drupal,
              \Drupal\ide_helper\Composer\Scripts,
              \Drupal\ide_helper\Utils,
              \Robo\TaskInfo,
              \org\bovigo\vfs\vfsStream,
              \Sweetchuck\GitHooks\Composer\Scripts,
              \Symfony\Component\Yaml\Yaml,
              \Webmozart\PathUtil\Path"/>
        </properties>
    </rule>

    <rule ref="rulesets/codesize.xml">
        <exclude name="TooManyPublicMethods"/>
    </rule>
    <rule name="CodeSize.TooManyPublicMethods"
        since="0.1"
        class="PHPMD\Rule\Design\TooManyPublicMethods"
        message="The {0} {1} has {2} public methods. Consider refactoring {1} to keep number of public methods under {3}."
        externalInfoUrl="http://phpmd.org/rules/codesize.html#toomanypublicmethods">
        <description>
            A class with too many public methods is probably a good suspect for refactoring, in
            order to reduce its complexity and find a way to have more fine grained objects.

            By default it ignores methods starting with 'get' or 'set'.
        </description>
        <priority>3</priority>
        <properties>
            <property name="maxmethods" description="The method count reporting threshold" value="20"/>
            <property name="ignorepattern" description="Ignore methods matching this regex" value="(^(set|get))i"/>
        </properties>
    </rule>

    <rule ref="rulesets/controversial.xml" />

    <rule ref="rulesets/design.xml" />

    <rule ref="rulesets/naming.xml">
        <exclude name="LongVariable"/>
        <exclude name="ShortVariable"/>
    </rule>
    <rule name="Naming.LongVariable"
        message="Avoid excessively long variable names like {0}. Keep variable name length under {1}."
        class="\PHPMD\Rule\Naming\LongVariable"
        externalInfoUrl="http://phpmd.org/rules/naming.html#longvariable">
        <properties>
            <property name="maximum" value="30" />
        </properties>
    </rule>
    <rule name="Naming.ShortVariable"
        message="Avoid variables with short names like {0}. Configured minimum length is {1}."
        class="\PHPMD\Rule\Naming\ShortVariable"
        externalInfoUrl="http://phpmd.org/rules/naming.html#shortvariable">
        <priority>3</priority>
        <properties>
            <property name="minimum" value="3" description="Minimum length for a variable, property or parameter name" />
            <property name="exceptions" value="id,cb" />
        </properties>
    </rule>

    <rule ref="rulesets/unusedcode.xml" />
</ruleset>
